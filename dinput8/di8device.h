#pragma once

#include "../common.h"
#include <dinput.h>

#pragma comment(lib, "dxguid.lib")

class DirectInputDevice8Proxy : public IDirectInputDevice8
{
private:
	enum eDeviceType
	{
		DEVICE_TYPE_UNKNOWN,
		DEVICE_TYPE_MOUSE,
		DEVICE_TYPE_KEYBOARD,
		DEVICE_TYPE_JOYSTICK
	};

	enum eXboxPadButtons
	{
		XBOX_PAD_X,
		XBOX_PAD_A,
		XBOX_PAD_Y,
		XBOX_PAD_B,
		XBOX_PAD_LT,
		XBOX_PAD_RT,
		XBOX_PAD_LB,
		XBOX_PAD_RB,
		XBOX_PAD_BACK,
		XBOX_PAD_START,
		XBOX_PAD_LEFTCLICK,
		XBOX_PAD_RIGHTCLICK,
		XBOX_PAD_DUP,
		XBOX_PAD_DDOWN,
		XBOX_PAD_DLEFT,
		XBOX_PAD_DRIGHT
	};

	IDirectInput8*       m_pDInput;
	IDirectInputDevice8* m_pDIDevice;
	eDeviceType          m_deviceType;

public:
	DirectInputDevice8Proxy(IDirectInput8* pDInput, IDirectInputDevice8* pDIDevice, REFGUID rguid);

	/*** IUnknown methods ***/
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, LPVOID * ppvObj);
	ULONG STDMETHODCALLTYPE   AddRef();
	ULONG STDMETHODCALLTYPE   Release();

	/*** IDirectInputDevice8A methods ***/
	HRESULT STDMETHODCALLTYPE GetCapabilities(LPDIDEVCAPS p0);
	HRESULT STDMETHODCALLTYPE EnumObjects(LPDIENUMDEVICEOBJECTSCALLBACKA p0, LPVOID p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE GetProperty(REFGUID rguid, LPDIPROPHEADER p1);
	HRESULT STDMETHODCALLTYPE SetProperty(REFGUID rguid, LPCDIPROPHEADER p1);
	HRESULT STDMETHODCALLTYPE Acquire();
	HRESULT STDMETHODCALLTYPE Unacquire();
	HRESULT STDMETHODCALLTYPE GetDeviceState(DWORD p0, LPVOID p1);
	HRESULT STDMETHODCALLTYPE GetDeviceData(DWORD p0, LPDIDEVICEOBJECTDATA p1, LPDWORD p2, DWORD p3);
	HRESULT STDMETHODCALLTYPE SetDataFormat(LPCDIDATAFORMAT p0);
	HRESULT STDMETHODCALLTYPE SetEventNotification(HANDLE p0);
	HRESULT STDMETHODCALLTYPE SetCooperativeLevel(HWND p0, DWORD p1);
	HRESULT STDMETHODCALLTYPE GetObjectInfo(LPDIDEVICEOBJECTINSTANCEA p0, DWORD p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE GetDeviceInfo(LPDIDEVICEINSTANCEA p0);
	HRESULT STDMETHODCALLTYPE RunControlPanel(HWND p0, DWORD p1);
	HRESULT STDMETHODCALLTYPE Initialize(HINSTANCE p0, DWORD p1, REFGUID rguid);
	HRESULT STDMETHODCALLTYPE CreateEffect(REFGUID rguid, LPCDIEFFECT p1, LPDIRECTINPUTEFFECT * p2, LPUNKNOWN p3);
	HRESULT STDMETHODCALLTYPE EnumEffects(LPDIENUMEFFECTSCALLBACKA p0, LPVOID p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE GetEffectInfo(LPDIEFFECTINFOA p0, REFGUID rguid);
	HRESULT STDMETHODCALLTYPE GetForceFeedbackState(LPDWORD p0);
	HRESULT STDMETHODCALLTYPE SendForceFeedbackCommand(DWORD p0);
	HRESULT STDMETHODCALLTYPE EnumCreatedEffectObjects(LPDIENUMCREATEDEFFECTOBJECTSCALLBACK p0, LPVOID p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE Escape(LPDIEFFESCAPE p0);
	HRESULT STDMETHODCALLTYPE Poll();
	HRESULT STDMETHODCALLTYPE SendDeviceData(DWORD p0, LPCDIDEVICEOBJECTDATA p1, LPDWORD p2, DWORD p3);
	HRESULT STDMETHODCALLTYPE EnumEffectsInFile(LPCSTR p0, LPDIENUMEFFECTSINFILECALLBACK p1, LPVOID p2, DWORD p3);
	HRESULT STDMETHODCALLTYPE WriteEffectToFile(LPCSTR p0, DWORD p2, LPDIFILEEFFECT p3, DWORD p4);
	HRESULT STDMETHODCALLTYPE BuildActionMap(LPDIACTIONFORMATA p0, LPCSTR p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE SetActionMap(LPDIACTIONFORMATA p0, LPCSTR p1, DWORD p2);
	HRESULT STDMETHODCALLTYPE GetImageInfo(LPDIDEVICEIMAGEINFOHEADERA p0);
};
